# function: read BAND.dat
# store bands into different lists.
def read_band(position_band):
    data_band=[];x_band=[];y_band=[]
# band_num to count bands
    band_num=0;count=0;middle_x=0
    with open(position_band,'r') as file:
        file.seek(55)
# remove unneccessary strings:
        for line in file:        
            line = line.strip().split('  ')
            line1 = list(filter(None,line)) # remove all '' effectively!!!
            if line[0]=='':
                continue
            elif '# Band-Index' in line[0]:
                band_num+=1
                continue
# string is immutable, so must be reassigned
            line1[0]=float(line1[0]);line1[1]=float(line1[1])
            x_band.append(line1[0]);y_band.append(line1[1]);data_band.append(line1)
            count+=1
    interval=count//band_num
    middle_x=(min(x_band)+max(x_band))/2
    return data_band,x_band,y_band,band_num,interval,middle_x
    
# function: read KLABELS
# store bands into different lists.
def read_klabel(position_klabel):
    data_klabel=[];name_klabel=[];value_klabel=[]
    with open(position_klabel,'r') as file:
        file.seek(72)
# remove unneccessary strings:
        for line in file:        
            line = line.strip('\n').strip().split('              ')
            if line[0]=='' or '*' in line[0]:
                continue
            if line[0]=='GAMMA':
                line[0]='Î“'
            if line[0]=='C':
                line[0]='S'
            line[1]=line[1].strip()
            line[1]=float(line[1])
            data_klabel.append(line);name_klabel.append(line[0]);value_klabel.append(line[1])
    return data_klabel,name_klabel,value_klabel
    
# function: read BAND_GAP
def read_gap(position_gap):
    with open(position_gap,'r') as file:
        for line in file:        
            line = line.strip('\n').strip().split('   ')
            if line[0]=='Band Gap (eV):':
                line[1].strip(' ')
                band_gap=float(line[1])
    return band_gap
    
# function: find the Conduction Band Minimum(CBM) and the Valence Band Maximum (VBM)
def find_cbm(data_band):
    data_1=[];data_2=[]
    for data in data_band:
        if data[1]>0:
            data_1.append(data[1])
        if data[1]<0:
            data_2.append(data[1])
    cbm_y=min(data_1);vbm_y=max(data_2)
    for i in data_band:
        if i[1]==cbm_y:
            cbm_x=i[0]
        if i[1]==vbm_y:
            vbm_x=i[0]
    return cbm_x,cbm_y,vbm_x,vbm_y

def put_text(cbm_x,vbm_x,middle_x):
    import matplotlib.pyplot as plt
    import matplotlib.ticker as ticker
# put the text in the middle of the pic:
    if cbm_x<middle_x:
        cbm_xtext=cbm_x+0.5
    else:
        cbm_xtext=cbm_x-0.5
    if vbm_x<middle_x:
        vbm_xtext=vbm_x+0.5
    else:
        vbm_xtext=vbm_x-0.5
# Annotating CBM and VBM, put them in the middle of the pic:
    if band_gap>0:
#         plt.annotate("CBM",fontsize=16,xy=(cbm_x,cbm_y),xytext=(cbm_xtext,cbm_y+0.5),color="blue",weight="light",
#         arrowprops=dict(arrowstyle="->",connectionstyle="arc3",color="k"))
        plt.axvline(x=cbm_x, c="b", ls="--", lw=2)
#         plt.annotate("VBM",fontsize=16,xy=(vbm_x,vbm_y),xytext=(vbm_xtext,vbm_y-0.5),color="red",weight="light",
#         arrowprops=dict(arrowstyle="->",connectionstyle="arc3",color="k"))
        plt.axvline(x=vbm_x, c="r", ls="--", lw=2)
        
# main program
def main_program(position_pic,number,band_gap,middle_x):
    import matplotlib.pyplot as plt
    import matplotlib.ticker as ticker
# extract files
    fig,ax= plt.subplots()
    plt.title(title,fontsize=20)
# axis spacing
    plt.ylim((-5, 5))
# adding axvlines:
    for i in value_klabel:
        plt.axvline(x=i, c="k", ls="--", lw=2)
    plt.xticks(value_klabel,name_klabel,fontsize=10)
    plt.yticks(fontsize=20)
    plt.ylabel('energy(eV)',fontsize=20)
    plt.tight_layout()
# divide into different lines:
    for i in range(0,band_num):
        ax.plot(x_band[interval*i:interval*(i+1)-1],y_band[interval*i:interval*(i+1)-1])
    put_text(cbm_x,vbm_x,middle_x)
    plt.savefig(position_pic, format='png')
    
# Console
import os
folder = "C:/Users/KING YPY/Documents/Jupyter/band" # folder
strain_mode=['shear'] # strain modes
# 'biaxial','shear','uniaxial_a','uniaxial_b'
for i in range(0,len(strain_mode)):
    path=folder+'/'+strain_mode[i]
    files= os.listdir(path) # get all files names
    # Identify file names, call functions:
    for file in files:
        if '.dat' in file:
            position_band = path+'/'+ file
            data_band,x_band,y_band,band_num,interval,middle_x=read_band(position_band)
            strain=file.strip('.dat').strip('band_strain_')# get corresponding number
            position_klabel=path+'/'+'klabel_strain_'+strain
            data_klabel,name_klabel,value_klabel=read_klabel(position_klabel)
            position_gap=path+'/'+'gap_strain_'+strain
            band_gap=read_gap(position_gap)
            if band_gap>0:
                cbm_x,cbm_y,vbm_x,vbm_y=find_cbm(data_band)
            position_pic=path+'/'+'pic_strain_'+strain+'.png'
            title='strain '+strain
            main_program(position_pic,title,band_gap,middle_x)
